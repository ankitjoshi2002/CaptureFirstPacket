Task 3. Capture network traffic with tcpdump
In this task, you will use tcpdump to save the captured network data to a packet capture file.

In the previous command, you used tcpdump to stream all network traffic. Here, you will use a filter and other tcpdump configuration options to save a small sample that contains only web (TCP port 80) network packet data.

Capture packet data into a file called capture.pcap:
sudo tcpdump -i eth0 -nn -c9 port 80 -w capture.pcap &
Copied!
You must press the ENTER key to get your command prompt back after running this command.

This command will run tcpdump in the background with the following options:

-i eth0: Capture data from the eth0 interface.
-nn: Do not attempt to resolve IP addresses or ports to names.This is best practice from a security perspective, as the lookup data may not be valid. It also prevents malicious actors from being alerted to an investigation.
-c9: Capture 9 packets of data and then exit.
port 80: Filter only port 80 traffic. This is the default HTTP port.
-w capture.pcap: Save the captured data to the named file.
&: This is an instruction to the Bash shell to run the command in the background.
This command runs in the background, but some output text will appear in your terminal. The text will not affect the commands when you follow the steps for the rest of the lab.

Use curl to generate some HTTP (port 80) traffic:
curl opensource.google.com
Copied!
When the curl command is used like this to open a website, it generates some HTTP (TCP port 80) traffic that can be captured.

Verify that packet data has been captured:
ls -l capture.pcap
Copied!
Note: The "Done" in the output indicates that the packet was captured.

Capture network traffic with tcpdump